<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="https://simonhdickson.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://simonhdickson.com/" rel="alternate" type="text/html" /><updated>2016-11-02T23:20:50+00:00</updated><id>https://simonhdickson.com/</id><title>Simon Dickson</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><author><name>Simon Dickson</name></author><entry><title>Permissions Error with Docker on Windows</title><link href="https://simonhdickson.com/blog/2016/10/30/permissions-errors-docker" rel="alternate" type="text/html" title="Permissions Error with Docker on Windows" /><published>2016-10-30T14:25:39+00:00</published><updated>2016-10-30T14:25:39+00:00</updated><id>https://simonhdickson.com/blog/2016/10/30/permissions-errors-docker</id><content type="html" xml:base="https://simonhdickson.com/blog/2016/10/30/permissions-errors-docker">&lt;p&gt;The other day I came across a Jekyll project I wanted to check out on my Windows 10
machine. I added a little Dockerfile and tried to build a container, and then I got
this error when running it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/docker/permissions_error.png&quot; alt=&quot;Permissions error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first I thought it was a jekyll problem, but then I realised it is actually
a docker issue. Recently I had to re-install the OS my machine and had forgot to share
the folder with docker. If you go into Docker Settings and “Shared Drives”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/docker/docker_shared_folder.png&quot; alt=&quot;Permissions error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now when your docker container tries to access your C Drive (or whichever drive you
shared) it should have permission now.&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>The other day I came across a Jekyll project I wanted to check out on my Windows 10
machine. I added a little Dockerfile and tried to build a container, and then I got
this error when running it:</summary></entry><entry><title>C# gotchas for F# devs</title><link href="https://simonhdickson.com/blog/2016/06/25/csharp-gotchas-for-fsharp-devs" rel="alternate" type="text/html" title="C# gotchas for F# devs" /><published>2016-06-25T12:41:08+01:00</published><updated>2016-06-25T12:41:08+01:00</updated><id>https://simonhdickson.com/blog/2016/06/25/csharp-gotchas-for-fsharp-devs</id><content type="html" xml:base="https://simonhdickson.com/blog/2016/06/25/csharp-gotchas-for-fsharp-devs">&lt;p&gt;Like many F# developers I have arrived in F# via C#. Sometimes
when you go back to C# though there are traps that you can fall into, 
here a few that I find myself falling into.&lt;/p&gt;

&lt;h3 id=&quot;implicit-type-conversion&quot;&gt;Implicit type conversion&lt;/h3&gt;

&lt;p&gt;In F# the following would error, since strings and ints are different types.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// The type 'string' does not match the type 'int'
let result = 1 + &quot;1&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But in C# there is no error, it just continues anyway.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
var result = 1 + &quot;1&quot;
// result = &quot;11&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;type-declarations-required&quot;&gt;Type declarations required&lt;/h3&gt;

&lt;p&gt;In F# most type declarations are optional, so long as the compiler 
can work it out.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let dict = Dictionary()
dict.Add(&quot;key&quot;, &quot;value&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But if you try this in C#, you’ll get a massive error. So you need to
provide the type declarations regardless, there are a few cases where 
you don’t have to. But generally you’ll have to get used to writing it
explictly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
var dict = new Dictionary&amp;lt;string, string&amp;gt;()
dict.Add(&quot;key&quot;, &quot;value&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;lack-of-expressions&quot;&gt;Lack of expressions&lt;/h3&gt;

&lt;p&gt;If we want to assign a variable as the result of a conditional 
it is easy.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let port =
    if isProduction then
        80
    else if isStaging then
        81
    else
        5000

// Same goes for pattern matching
let port =
    match settings with
    | Production -&amp;gt; 80
    | Staging -&amp;gt; 81
    | _ -&amp;gt; 5000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But in C# this is not possible because conditions are statments
not expressions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
// I find myself trying to write code like quite a lot
var port =
    if (isProduction)
        80;
    else if (isStaging)
        81;
    else
        5000;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instead you have to write it using assignments.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
int port;
if (isProduction)
    port = 80;
else if (isStaging)
    port = 81;
else
    port = 5000;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This also has the disadvantage that if you don’t have an else
statement you won’t know (you do get a warning for reference types
but not for value types).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let port =
    if isProduction then
        80
    else if isStaging then
        81
    // Error!

// Same goes for pattern matching
let port =
    match settings with
    | Production -&amp;gt; 80
    | Staging -&amp;gt; 81
    // Error!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But in C#…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
int port;
if (isProduction)
    port = 80;
else if (isStaging)
    port = 81;
// Did we mean to do this?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;out-parameters-are-ugly&quot;&gt;Out parameters are ugly&lt;/h3&gt;

&lt;p&gt;F# handles out parameters in a suprizely slick way&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let result =
    match Int32.TryParse &quot;1&quot; with
    | true, i -&amp;gt; i
    | false, _ -&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I like this in particular because ‘i’ is only available if
it has a value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
int result;
int i;
if (int.TryParse(&quot;1&quot;, out i))
{
    result = i;
}
else
{
    result = 2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re left with this floating ‘i’ here, that is really useless
unless we know the result of the TryParse method. This is slightly
more akward than above as because out parameters are always assigned
(even for reference types) so we won’t even get an error if we try to use
it later by mistake.&lt;/p&gt;

&lt;h3 id=&quot;no-errors-on-unused-results&quot;&gt;No errors on unused results&lt;/h3&gt;

&lt;p&gt;In F# and C# it isn’t uncommon to return a status code, to state
what the result of a operation was. In F#, if we don’t do anything
with the result, the compiler will let me know that we forgot
to handle it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Result = Success | Failure

let performOperation () =
    // Do something
    Failure

let calculation () =
    // Error This expression should have type 'unit'
    performOperation ()
    Success

let calculation () =
    // We can still choose to live dangerously though
    performOperation () |&amp;gt; ignore
    Success
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So in F# by default it’ll give us a hint that we might have 
introduced a bug there, but we can still ignore it and forget
about it if we wish.&lt;/p&gt;

&lt;p&gt;In C# though, you get no warnings or errors.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[lang=cs]
enum Result {
    Success,
    Failure
}

Result PerformOperation()
{
    // Do something
    return Result.Failure;
}

Result Calculation()
{
    // Unless we remember to check here, the compiler
    // will never give us a hint
    PerformOperation();
    return Result.Success;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These are just some of the things to be warying of when going
from F# to C#. There are some others gotchas related to async
but &lt;a href=&quot;http://tomasp.net/blog/csharp-async-gotchas.aspx&quot;&gt;that is a blog post in it’s own right&lt;/a&gt;.&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>Like many F# developers I have arrived in F# via C#. Sometimes
when you go back to C# though there are traps that you can fall into, 
here a few that I find myself falling into.

Implicit type conversion

In F# the following would error, since strings and ints are different types.

// The type 'string' does not match the type 'int'
let result = 1 + &quot;1&quot;



But in C# there is no error, it just continues anyway.

[lang=cs]
var result = 1 + &quot;1&quot;
// result = &quot;11&quot;



Type declarations required

In F# most type declarations are optional, so long as the compiler 
can work it out.

let dict = Dictionary()
dict.Add(&quot;key&quot;, &quot;value&quot;)



But if you try this in C#, you’ll get a massive error. So you need to
provide the type declarations regardless, there are a few cases where 
you don’t have to. But generally you’ll have to get used to writing it
explictly.

[lang=cs]
var dict = new Dictionary&amp;lt;string, string&amp;gt;()
dict.Add(&quot;key&quot;, &quot;value&quot;)



Lack of expressions

If we want to assign a variable as the result of a conditional 
it is easy.

let port =
    if isProduction then
        80
    else if isStaging then
        81
    else
        5000

// Same goes for pattern matching
let port =
    match settings with
    | Production -&amp;gt; 80
    | Staging -&amp;gt; 81
    | _ -&amp;gt; 5000



But in C# this is not possible because conditions are statments
not expressions.

[lang=cs]
// I find myself trying to write code like quite a lot
var port =
    if (isProduction)
        80;
    else if (isStaging)
        81;
    else
        5000;



Instead you have to write it using assignments.

[lang=cs]
int port;
if (isProduction)
    port = 80;
else if (isStaging)
    port = 81;
else
    port = 5000;



This also has the disadvantage that if you don’t have an else
statement you won’t know (you do get a warning for reference types
but not for value types).

let port =
    if isProduction then
        80
    else if isStaging then
        81
    // Error!

// Same goes for pattern matching
let port =
    match settings with
    | Production -&amp;gt; 80
    | Staging -&amp;gt; 81
    // Error!



But in C#…

[lang=cs]
int port;
if (isProduction)
    port = 80;
else if (isStaging)
    port = 81;
// Did we mean to do this?



Out parameters are ugly

F# handles out parameters in a suprizely slick way

let result =
    match Int32.TryParse &quot;1&quot; with
    | true, i -&amp;gt; i
    | false, _ -&amp;gt; 2



I like this in particular because ‘i’ is only available if
it has a value.

[lang=cs]
int result;
int i;
if (int.TryParse(&quot;1&quot;, out i))
{
    result = i;
}
else
{
    result = 2;
}



We’re left with this floating ‘i’ here, that is really useless
unless we know the result of the TryParse method. This is slightly
more akward than above as because out parameters are always assigned
(even for reference types) so we won’t even get an error if we try to use
it later by mistake.

No errors on unused results

In F# and C# it isn’t uncommon to return a status code, to state
what the result of a operation was. In F#, if we don’t do anything
with the result, the compiler will let me know that we forgot
to handle it.

type Result = Success | Failure

let performOperation () =
    // Do something
    Failure

let calculation () =
    // Error This expression should have type 'unit'
    performOperation ()
    Success

let calculation () =
    // We can still choose to live dangerously though
    performOperation () |&amp;gt; ignore
    Success



So in F# by default it’ll give us a hint that we might have 
introduced a bug there, but we can still ignore it and forget
about it if we wish.

In C# though, you get no warnings or errors.

[lang=cs]
enum Result {
    Success,
    Failure
}

Result PerformOperation()
{
    // Do something
    return Result.Failure;
}

Result Calculation()
{
    // Unless we remember to check here, the compiler
    // will never give us a hint
    PerformOperation();
    return Result.Success;
}



These are just some of the things to be warying of when going
from F# to C#. There are some others gotchas related to async
but that is a blog post in it’s own right.</summary></entry><entry><title>Ah fuget it</title><link href="https://simonhdickson.com/blog/2014/08/16/ah-fuget-it" rel="alternate" type="text/html" title="Ah fuget it" /><published>2014-08-16T21:16:00+01:00</published><updated>2014-08-16T21:16:00+01:00</updated><id>https://simonhdickson.com/blog/2014/08/16/ah-fuget-it</id><content type="html" xml:base="https://simonhdickson.com/blog/2014/08/16/ah-fuget-it">&lt;p&gt;If you use the F# interactive alot like me, you’ve probably often come undone because there is no easy way to just pull down a nuget package and work with it. Often I end up creating a dummy project just to reference something via nuget and having to script there.&lt;/p&gt;

&lt;h3 id=&quot;fuget&quot;&gt;fuget&lt;/h3&gt;

&lt;p&gt;Even though it sounds like “nuget” with an f instead of an n, it is actually named after a word I often say when using nuget (or atleast sounds like ;)).&lt;/p&gt;

&lt;p&gt;It has no external dependencies, it is just a single file that you need to copy into your directory and then you’re away.&lt;/p&gt;

&lt;p&gt;Simple example of using it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#load &quot;fuget.fsx&quot;
open Fuget
fuget &quot;FSharp.Data&quot; Latest
#r &quot;fuget/FSharp.Data/lib/net40/FSharp.Data.dll&quot;

open FSharp.Data

type fuget = JsonProvider&amp;lt;&quot;&quot;&quot;{&quot;fuget&quot;:&quot;hello world&quot;}&quot;&quot;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also request an exact version using:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fuget &quot;FSharp.Data&quot; (Version &quot;2.0.9&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It works both from the interactive and from fsx files (even from inside FAKE scripts), and it available &lt;a href=&quot;https://github.com/simonhdickson/fuget&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However I only wrote it yesterday afternoon while drinking beer so I in no way take responsibility for any damage it may cause. It also has some issues currently (it doesn’t handle dependencies, there is no way to query for packages so you have to just know which package you want).&lt;/p&gt;

&lt;p&gt;Btw, it does run on Mac (and probably Linux too but I don’t have a Linux VM setup on this machine):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/media/fuget/mac-terminal-screenshot.png&quot; alt=&quot;Fuget terminal&quot; /&gt;&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>If you use the F# interactive alot like me, you’ve probably often come undone because there is no easy way to just pull down a nuget package and work with it. Often I end up creating a dummy project just to reference something via nuget and having to script there.

fuget

Even though it sounds like “nuget” with an f instead of an n, it is actually named after a word I often say when using nuget (or atleast sounds like ;)).

It has no external dependencies, it is just a single file that you need to copy into your directory and then you’re away.

Simple example of using it:

#load &quot;fuget.fsx&quot;
open Fuget
fuget &quot;FSharp.Data&quot; Latest
#r &quot;fuget/FSharp.Data/lib/net40/FSharp.Data.dll&quot;

open FSharp.Data

type fuget = JsonProvider&amp;lt;&quot;&quot;&quot;{&quot;fuget&quot;:&quot;hello world&quot;}&quot;&quot;&quot;&amp;gt;



You can also request an exact version using:

fuget &quot;FSharp.Data&quot; (Version &quot;2.0.9&quot;)



It works both from the interactive and from fsx files (even from inside FAKE scripts), and it available here.

However I only wrote it yesterday afternoon while drinking beer so I in no way take responsibility for any damage it may cause. It also has some issues currently (it doesn’t handle dependencies, there is no way to query for packages so you have to just know which package you want).

Btw, it does run on Mac (and probably Linux too but I don’t have a Linux VM setup on this machine):</summary></entry><entry><title>Running Kafka on Windows</title><link href="https://simonhdickson.com/blog/2014/06/13/running-kafka-on-windows" rel="alternate" type="text/html" title="Running Kafka on Windows" /><published>2014-06-13T21:16:00+01:00</published><updated>2014-06-13T21:16:00+01:00</updated><id>https://simonhdickson.com/blog/2014/06/13/running-kafka-on-windows</id><content type="html" xml:base="https://simonhdickson.com/blog/2014/06/13/running-kafka-on-windows">&lt;p&gt;I was introduced to Kafka the other day and was having loads of fun running it from the mac terminal.&lt;/p&gt;

&lt;p&gt;Then I wanted to try out &lt;a href=&quot;https://github.com/Jroland/kafka-net&quot;&gt;the .net client library&lt;/a&gt;, so went to run the windows bat files, and sadly it didn’t work. Sadness :(. However there is a way to get it working under Windows using some Cygwin magic.&lt;/p&gt;

&lt;p&gt;You need two things for this to work:&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Java needs to be installed.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/babun/babun&quot;&gt;Babun&lt;/a&gt; installed (if you already have Cygwin set up you can use that, but I’ll carry on assuming you’re using babun because it makes it so easy!)&lt;/li&gt;
  &lt;li&gt;Download the latest version of &lt;a href=&quot;http://kafka.apache.org/downloads.html&quot;&gt;Kafka&lt;/a&gt; (and untar it).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’ve got all that, let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;instructions&quot;&gt;Instructions&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;bin\kafka-run-class.sh&lt;/code&gt; and add double quotes around the $JAVA variables, and change $CLASSPATH to &lt;code class=&quot;highlighter-rouge&quot;&gt;`cygpath -wp $CLASSPATH`&lt;/code&gt; (with the backticks).&lt;/li&gt;
  &lt;li&gt;This part is optional, but if you want to get logging to work you’ll need to open &lt;code class=&quot;highlighter-rouge&quot;&gt;config\server.properties&lt;/code&gt; and change the line &lt;code class=&quot;highlighter-rouge&quot;&gt;log.dirs=/tmp/kafka-logs&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;log.dirs=\\tmp\\kafka-logs&lt;/code&gt;. And you want to do the same for all the rest of the config files you end up using.&lt;/li&gt;
  &lt;li&gt;Open up babun and go the folder where you download kafka to, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd /cygdrive/c/Users/YOURNAME/Downloads/kafka_2.9.2-0.8.1.1&lt;/code&gt; or wherever you downloaded it to.&lt;/li&gt;
  &lt;li&gt;Then you should be all done, and can follow the instructions &lt;a href=&quot;http://kafka.apache.org/documentation.html#quickstart&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;possible-issues&quot;&gt;Possible Issues&lt;/h3&gt;

&lt;p&gt;A few gotcha you might get, these problems shouldn’t occur but if they do here are the fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In my case the server JRE bin folder didn’t have the server folder in it, but if you install the JDK you can copy it over to the JRE folder to fix that.&lt;/li&gt;
  &lt;li&gt;Probably related to the above fix, if you get an error something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Unrecognized VM option 'CheckCompressedOops'&lt;/code&gt; then if you open the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/kafka-run-class.sh&lt;/code&gt; file and remove the line &lt;code class=&quot;highlighter-rouge&quot;&gt;-XX:+UseCompressedOops&lt;/code&gt; it should work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that’s out the way, Kafka Type Provider anyone?&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>I was introduced to Kafka the other day and was having loads of fun running it from the mac terminal.

Then I wanted to try out the .net client library, so went to run the windows bat files, and sadly it didn’t work. Sadness :(. However there is a way to get it working under Windows using some Cygwin magic.

You need two things for this to work:

Prerequisites


  Java needs to be installed.
  Babun installed (if you already have Cygwin set up you can use that, but I’ll carry on assuming you’re using babun because it makes it so easy!)
  Download the latest version of Kafka (and untar it).


Once you’ve got all that, let’s get started!

Instructions


  Open bin\kafka-run-class.sh and add double quotes around the $JAVA variables, and change $CLASSPATH to `cygpath -wp $CLASSPATH` (with the backticks).
  This part is optional, but if you want to get logging to work you’ll need to open config\server.properties and change the line log.dirs=/tmp/kafka-logs to log.dirs=\\tmp\\kafka-logs. And you want to do the same for all the rest of the config files you end up using.
  Open up babun and go the folder where you download kafka to, e.g. cd /cygdrive/c/Users/YOURNAME/Downloads/kafka_2.9.2-0.8.1.1 or wherever you downloaded it to.
  Then you should be all done, and can follow the instructions here.


Possible Issues

A few gotcha you might get, these problems shouldn’t occur but if they do here are the fixes:


  In my case the server JRE bin folder didn’t have the server folder in it, but if you install the JDK you can copy it over to the JRE folder to fix that.
  Probably related to the above fix, if you get an error something like Unrecognized VM option 'CheckCompressedOops' then if you open the bin/kafka-run-class.sh file and remove the line -XX:+UseCompressedOops it should work.


Now that’s out the way, Kafka Type Provider anyone?</summary></entry><entry><title>F# 3.1 as C# 6.0 Strict Mode</title><link href="https://simonhdickson.com/blog/2014/02/27/fsharp-31-as-csharp-60-strict-mode" rel="alternate" type="text/html" title="F# 3.1 as C# 6.0 Strict Mode" /><published>2014-02-27T23:32:00+00:00</published><updated>2014-02-27T23:32:00+00:00</updated><id>https://simonhdickson.com/blog/2014/02/27/fsharp-31-as-csharp-60-strict-mode</id><content type="html" xml:base="https://simonhdickson.com/blog/2014/02/27/fsharp-31-as-csharp-60-strict-mode">&lt;p&gt;I was reading the (probable) new features of &lt;a href=&quot;http://damieng.com/blog/2013/12/09/probable-c-6-0-features-illustrated&quot;&gt;C# 6.0&lt;/a&gt;, and I can’t help but feel like C# wants to just be F# at this point but just doesn’t want to alienate its fans.&lt;/p&gt;

&lt;p&gt;If imitation really is the sincerest form of flattery, then Don Syme must be very flattered by C# these days. Almost every version since 3.5 has just been implementing half assed versions things of F# already had (tuples, async and tasks I’m looking at you), and now with 6.0 it’s getting even worse.&lt;/p&gt;

&lt;p&gt;The truth is that C# is turning into the new Java, a language that is afraid to change anything for fear of attacks from the Enterprise shops.&lt;/p&gt;

&lt;p&gt;Don’t fear however, because I have a solution that will solve both problems: re-name F# 3.1 to C# 6.0 strict mode, and have C# 5.0 as C# 6.0 quirks mode. The enterpise shops will be happy because nothing will have changed (and they love that). All the non-enteripse devs will marvel at all the amazing new features that have been introduced to this “C# 6.0 strict mode”. How amazing it managed to support everything that C# 5.0 had, plus tonnes of improvements.&lt;/p&gt;

&lt;p&gt;It would dramatically increase uptake of F#, it would also mean the C# team could concentrate on doing something other than shoehorning everything from F# into C#. Win-win-win-win-WIN for everyone!&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>I was reading the (probable) new features of C# 6.0, and I can’t help but feel like C# wants to just be F# at this point but just doesn’t want to alienate its fans.

If imitation really is the sincerest form of flattery, then Don Syme must be very flattered by C# these days. Almost every version since 3.5 has just been implementing half assed versions things of F# already had (tuples, async and tasks I’m looking at you), and now with 6.0 it’s getting even worse.

The truth is that C# is turning into the new Java, a language that is afraid to change anything for fear of attacks from the Enterprise shops.

Don’t fear however, because I have a solution that will solve both problems: re-name F# 3.1 to C# 6.0 strict mode, and have C# 5.0 as C# 6.0 quirks mode. The enterpise shops will be happy because nothing will have changed (and they love that). All the non-enteripse devs will marvel at all the amazing new features that have been introduced to this “C# 6.0 strict mode”. How amazing it managed to support everything that C# 5.0 had, plus tonnes of improvements.

It would dramatically increase uptake of F#, it would also mean the C# team could concentrate on doing something other than shoehorning everything from F# into C#. Win-win-win-win-WIN for everyone!</summary></entry><entry><title>Nancy + F# = Fancy</title><link href="https://simonhdickson.com/blog/2013/12/14/nancy-plus-fsharp" rel="alternate" type="text/html" title="Nancy + F# = Fancy" /><published>2013-12-14T10:00:00+00:00</published><updated>2013-12-14T10:00:00+00:00</updated><id>https://simonhdickson.com/blog/2013/12/14/nancy-plus-fsharp</id><content type="html" xml:base="https://simonhdickson.com/blog/2013/12/14/nancy-plus-fsharp">&lt;p&gt;Last week I made the &lt;a href=&quot;blog/2013/12/03/owin-the-myth&quot;&gt;owin monad&lt;/a&gt;, and when I showed it to &lt;a href=&quot;https://twitter.com/nbevans&quot;&gt;@@nbevans&lt;/a&gt; he suggested making it work with nancy.&lt;/p&gt;

&lt;p&gt;So I did.&lt;/p&gt;

&lt;p&gt;Let me introduce Fancy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let pipeline =
    fancy {
        get &quot;/&quot; (fun () -&amp;gt; sprintf &quot;Hello World!&quot;)
        get &quot;/%s&quot; (fun name -&amp;gt; sprintf &quot;Hello %s!&quot; name) 
        get &quot;/square/%i&quot; (fun number -&amp;gt; sprintf &quot;%i&quot; &amp;lt;| number * number) 
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I won’t dig too heavily into the code at this moment, it is quite ugly and hacky in places. It is also obviously not production ready. However, the nice thing about this is that it is fully typed, i.e:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let pipeline =
    fancy {
        get &quot;/%s&quot; (fun name -&amp;gt; sprintf &quot;%s&quot; name)       // Works
        get &quot;/%s&quot; (fun (name:int) -&amp;gt; sprintf &quot;%s&quot; name) // Compiler error!
        get &quot;/%i&quot; (fun name -&amp;gt; sprintf &quot;%s&quot; name)       // Compiler error!
        get &quot;/%s&quot; (fun name -&amp;gt; sprintf &quot;%i&quot; name)       // Compiler error!
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now if you know your nancy, you’ll know that nancy doesn’t expect the format “/%s” or “/%i”; it expects the format “/{name}” or “/{number:int}”. And you probably also know that all normally StringFormat functions in F# take type parameters, rather than a function of those types.&lt;/p&gt;

&lt;p&gt;Well what happens is we’re only using StringFormat for static type checking, we’re not actually using StringFormat here quite as it was intended.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;member this.Get(m, url:StringFormat&amp;lt;'a-&amp;gt;'b,'c&amp;gt;, processor:'a-&amp;gt;'b) =
    // ommitted
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These type constraints do that. There is actually a slight error, with the above code, but I’m reasonably certain it can be converted into a feature. You see you are required to have the correct parameters in the correct order, but extra paramters are allowed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let pipeline =
    fancy {
        get &quot;/%s&quot; (fun name (other:int) -&amp;gt; sprintf &quot;%s&quot; name)       // Compiles
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Currently this will cause the code to fail, however it is quite possible we can use that to implement a convention based system for passing extra things like headers, parameters, etc.&lt;/p&gt;

&lt;p&gt;Anyway here is a &lt;a href=&quot;https://github.com/simonhdickson/Fancy&quot;&gt;link to the repo&lt;/a&gt;, feel free to grab the code and have a play!&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>Last week I made the owin monad, and when I showed it to @@nbevans he suggested making it work with nancy.

So I did.

Let me introduce Fancy:

let pipeline =
    fancy {
        get &quot;/&quot; (fun () -&amp;gt; sprintf &quot;Hello World!&quot;)
        get &quot;/%s&quot; (fun name -&amp;gt; sprintf &quot;Hello %s!&quot; name) 
        get &quot;/square/%i&quot; (fun number -&amp;gt; sprintf &quot;%i&quot; &amp;lt;| number * number) 
    }



I won’t dig too heavily into the code at this moment, it is quite ugly and hacky in places. It is also obviously not production ready. However, the nice thing about this is that it is fully typed, i.e:

let pipeline =
    fancy {
        get &quot;/%s&quot; (fun name -&amp;gt; sprintf &quot;%s&quot; name)       // Works
        get &quot;/%s&quot; (fun (name:int) -&amp;gt; sprintf &quot;%s&quot; name) // Compiler error!
        get &quot;/%i&quot; (fun name -&amp;gt; sprintf &quot;%s&quot; name)       // Compiler error!
        get &quot;/%s&quot; (fun name -&amp;gt; sprintf &quot;%i&quot; name)       // Compiler error!
    }



Now if you know your nancy, you’ll know that nancy doesn’t expect the format “/%s” or “/%i”; it expects the format “/{name}” or “/{number:int}”. And you probably also know that all normally StringFormat functions in F# take type parameters, rather than a function of those types.

Well what happens is we’re only using StringFormat for static type checking, we’re not actually using StringFormat here quite as it was intended.

member this.Get(m, url:StringFormat&amp;lt;'a-&amp;gt;'b,'c&amp;gt;, processor:'a-&amp;gt;'b) =
    // ommitted



These type constraints do that. There is actually a slight error, with the above code, but I’m reasonably certain it can be converted into a feature. You see you are required to have the correct parameters in the correct order, but extra paramters are allowed.

let pipeline =
    fancy {
        get &quot;/%s&quot; (fun name (other:int) -&amp;gt; sprintf &quot;%s&quot; name)       // Compiles
    }



Currently this will cause the code to fail, however it is quite possible we can use that to implement a convention based system for passing extra things like headers, parameters, etc.

Anyway here is a link to the repo, feel free to grab the code and have a play!</summary></entry><entry><title>Owin: The Myth, the Monad</title><link href="https://simonhdickson.com/blog/2013/12/03/owin-the-myth" rel="alternate" type="text/html" title="Owin: The Myth, the Monad" /><published>2013-12-03T20:37:00+00:00</published><updated>2013-12-03T20:37:00+00:00</updated><id>https://simonhdickson.com/blog/2013/12/03/owin-the-myth</id><content type="html" xml:base="https://simonhdickson.com/blog/2013/12/03/owin-the-myth">&lt;p&gt;I’ve played with owin in F# &lt;a href=&quot;https://github.com/simonhdickson/Bar&quot;&gt;before&lt;/a&gt; and recently have been playing with computational builders. So I thought the other day, how about combining them both so you can write something long the lines of this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let pipeline =
    owin {
        get &quot;/&quot; &amp;lt;@@ fun () -&amp;gt; &quot;Hello World&quot; @@&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Gotta love that syntactic sugar, so how do we do this? Well really, the owin monad is actually really simple to implement. You have a state, in this case the state is the is the IAppBuilder. So for posterity let’s just steal the important bits of the state monad from FSharpx and use that. So let’s skip to the good bit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type OwinBuilder() =
    // omitted
    [&amp;lt;CustomOperation(&quot;get&quot;, MaintainsVariableSpaceUsingBind=true)&amp;gt;]
    member this.Get(m, url, processor) =
        this.Bind(m, fun a -&amp;gt;
            this.Bind(getState, fun (app:IAppBuilder) -&amp;gt;
                putState &amp;lt;| app.UseRequestProcessor(&quot;GET&quot;, url, processor)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In a computation expression there is a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd233182.aspx&quot;&gt;standard workflow&lt;/a&gt; for operations that you can use (this includes the Bind operation). In our case we don’t actually want this, we want to define our own operators (for get, post, etc). The CustomOperation attribute allows you to define a these, and also describe how your custom operator works.&lt;/p&gt;

&lt;p&gt;In this case we want to define our operator so that each line defines a new endpoint of our web api, and pass all the state around in the background. To do this the “MaintainsVariableSpaceUsingBind”, works to bind all the statements together. In the above code any previous operators will be passed in the m paramter, and then the we’re basically appending our new owin endpoint to end of that, which will then be passed into the next operator, etc.&lt;/p&gt;

&lt;p&gt;Anyway, here is a &lt;a href=&quot;https://github.com/simonhdickson/OwinBuilder&quot;&gt;link to the repository&lt;/a&gt;, if you’re interested in looking into it further.&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>I’ve played with owin in F# before and recently have been playing with computational builders. So I thought the other day, how about combining them both so you can write something long the lines of this:

let pipeline =
    owin {
        get &quot;/&quot; &amp;lt;@@ fun () -&amp;gt; &quot;Hello World&quot; @@&amp;gt;
    }



Gotta love that syntactic sugar, so how do we do this? Well really, the owin monad is actually really simple to implement. You have a state, in this case the state is the is the IAppBuilder. So for posterity let’s just steal the important bits of the state monad from FSharpx and use that. So let’s skip to the good bit:

type OwinBuilder() =
    // omitted
    [&amp;lt;CustomOperation(&quot;get&quot;, MaintainsVariableSpaceUsingBind=true)&amp;gt;]
    member this.Get(m, url, processor) =
        this.Bind(m, fun a -&amp;gt;
            this.Bind(getState, fun (app:IAppBuilder) -&amp;gt;
                putState &amp;lt;| app.UseRequestProcessor(&quot;GET&quot;, url, processor)))



In a computation expression there is a standard workflow for operations that you can use (this includes the Bind operation). In our case we don’t actually want this, we want to define our own operators (for get, post, etc). The CustomOperation attribute allows you to define a these, and also describe how your custom operator works.

In this case we want to define our operator so that each line defines a new endpoint of our web api, and pass all the state around in the background. To do this the “MaintainsVariableSpaceUsingBind”, works to bind all the statements together. In the above code any previous operators will be passed in the m paramter, and then the we’re basically appending our new owin endpoint to end of that, which will then be passed into the next operator, etc.

Anyway, here is a link to the repository, if you’re interested in looking into it further.</summary></entry><entry><title>Tabs vs Spaces</title><link href="https://simonhdickson.com/blog/2013/11/24/tabs-vs-spaces" rel="alternate" type="text/html" title="Tabs vs Spaces" /><published>2013-11-24T22:05:00+00:00</published><updated>2013-11-24T22:05:00+00:00</updated><id>https://simonhdickson.com/blog/2013/11/24/tabs-vs-spaces</id><content type="html" xml:base="https://simonhdickson.com/blog/2013/11/24/tabs-vs-spaces">&lt;h3 id=&quot;spaces-the-final-frontier&quot;&gt;Spaces, the final frontier&lt;/h3&gt;
&lt;p&gt;Tabs vs Spaces: the greatest of all the holy wars. Well it turns out that in F# there is no need for that debate: because in F# tabs are treated as an error by the compiler.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let spaceFun x =
	x // ok

let tabFun x =
	x // error!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now if only there was an option for the F# compiler to treat nulls as errors too…&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>Spaces, the final frontier
Tabs vs Spaces: the greatest of all the holy wars. Well it turns out that in F# there is no need for that debate: because in F# tabs are treated as an error by the compiler.

let spaceFun x =
	x // ok

let tabFun x =
	x // error!



Now if only there was an option for the F# compiler to treat nulls as errors too…</summary></entry><entry><title>The Simon Says Monad</title><link href="https://simonhdickson.com/blog/2013/11/22/the-simon-says-monad" rel="alternate" type="text/html" title="The Simon Says Monad" /><published>2013-11-22T15:56:00+00:00</published><updated>2013-11-22T15:56:00+00:00</updated><id>https://simonhdickson.com/blog/2013/11/22/the-simon-says-monad</id><content type="html" xml:base="https://simonhdickson.com/blog/2013/11/22/the-simon-says-monad">&lt;h3 id=&quot;what-is-a-monad&quot;&gt;What is a Monad?&lt;/h3&gt;
&lt;p&gt;Everyone tries to explain monads in a simple way and makes it sound way more complicated than it really is. Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function. That not strictly mathmatically true, but anything that fits that description could at least be described as monadic.&lt;/p&gt;

&lt;p&gt;You might be reading that and thinking “surely everything is monadic?”, well yes, almost everything is kind of monadic (or can be described in that way).&lt;/p&gt;

&lt;h3 id=&quot;the-simon-says-monad&quot;&gt;The Simon Says Monad&lt;/h3&gt;
&lt;p&gt;May I present the single most useful monad in the world!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let doIt this that =
    simonSays{
        let! i = this
        let! j = that
        printfn &quot;%i&quot; &amp;lt;| i + j
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, the way I see it, when you declare simonSays { … }; you’re basically saying “we don’t play by normal rules: now we play by simonSays rules.” What this means is, if you don’t say “Simon Says”, then you don’t do anything. So for example, if we invoke it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doIt (SimonSays 1) (SimonSays 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then the result is SimonSays 2. However if we do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doIt (SimonSays 1) SimonDidntSay
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The the result is SimonDidntSay. To go back to the definition of monads earlier, “Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function”. In the Simon Says monad, there is a single very simple rule: you must say “Simon Says”, otherwise we don’t do anything. If we re-write this code slightly to remove all the F# sugar, it become far more obvious what is happening here.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let doIt this that =
    match this with
    | SimonSays i -&amp;gt;
        match that with
        | SimonSays j -&amp;gt; printfn &quot;%i&quot; &amp;lt;| i + j
        | _ -&amp;gt; ()
    | _ -&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you build up a large chain of these things, then writing all this would get cumbersome.&lt;/p&gt;

&lt;h3 id=&quot;maybe-monad&quot;&gt;Maybe monad&lt;/h3&gt;
&lt;p&gt;If you know your monads, you may have already noticed that the “Simon Says” monad bears a slightly resemblance to the “Maybe” monad. Ok, it IS actually maybe monad. Infact you can find more information about the maybe monad &lt;a href=&quot;http://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>What is a Monad?
Everyone tries to explain monads in a simple way and makes it sound way more complicated than it really is. Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function. That not strictly mathmatically true, but anything that fits that description could at least be described as monadic.

You might be reading that and thinking “surely everything is monadic?”, well yes, almost everything is kind of monadic (or can be described in that way).

The Simon Says Monad
May I present the single most useful monad in the world!

let doIt this that =
    simonSays{
        let! i = this
        let! j = that
        printfn &quot;%i&quot; &amp;lt;| i + j
    }



So, the way I see it, when you declare simonSays { … }; you’re basically saying “we don’t play by normal rules: now we play by simonSays rules.” What this means is, if you don’t say “Simon Says”, then you don’t do anything. So for example, if we invoke it like this:

doIt (SimonSays 1) (SimonSays 1)



Then the result is SimonSays 2. However if we do:

doIt (SimonSays 1) SimonDidntSay



The the result is SimonDidntSay. To go back to the definition of monads earlier, “Something is monadic if there are rule or set of rules that can define how a set of functions is combined into another function”. In the Simon Says monad, there is a single very simple rule: you must say “Simon Says”, otherwise we don’t do anything. If we re-write this code slightly to remove all the F# sugar, it become far more obvious what is happening here.

let doIt this that =
    match this with
    | SimonSays i -&amp;gt;
        match that with
        | SimonSays j -&amp;gt; printfn &quot;%i&quot; &amp;lt;| i + j
        | _ -&amp;gt; ()
    | _ -&amp;gt; ()



If you build up a large chain of these things, then writing all this would get cumbersome.

Maybe monad
If you know your monads, you may have already noticed that the “Simon Says” monad bears a slightly resemblance to the “Maybe” monad. Ok, it IS actually maybe monad. Infact you can find more information about the maybe monad here.</summary></entry><entry><title>FsCheck</title><link href="https://simonhdickson.com/blog/2013/11/16/fscheck" rel="alternate" type="text/html" title="FsCheck" /><published>2013-11-16T15:33:00+00:00</published><updated>2013-11-16T15:33:00+00:00</updated><id>https://simonhdickson.com/blog/2013/11/16/fscheck</id><content type="html" xml:base="https://simonhdickson.com/blog/2013/11/16/fscheck">&lt;h2 id=&quot;property-based-testing&quot;&gt;Property based testing&lt;/h2&gt;
&lt;p&gt;So you might be first wondering what property based testing means. Simply put you describe properties of your functions, and then you bombard your code with data trying to prove or disprove these properties.&lt;/p&gt;

&lt;p&gt;Here’s an example, let’s say we have a function like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let removeNegatives list =
        let rec removeNegatives' list newList =
            match list with
            | [] -&amp;gt; newList
            | head :: tail when head &amp;lt; 0 -&amp;gt; removeNegatives' tail newList 
            | head :: tail -&amp;gt; removeNegatives' tail (head :: newList)
        removeNegatives' list []
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we want to say this function has the following three properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you pass in a list, it returns the list without any negative numbers in it.&lt;/li&gt;
  &lt;li&gt;If you pass in a list without any negative numbers in it, you get exactly the same list back (this is implied from the first property, but let’s make it explict anyway).&lt;/li&gt;
  &lt;li&gt;The function will not re-order the elements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, how do we go about testing these properties?&lt;/p&gt;

&lt;h2 id=&quot;fscheck-to-the-rescue&quot;&gt;FsCheck to the rescue&lt;/h2&gt;
&lt;p&gt;FsCheck is an F# port of the Haskell framework QuickCheck. What it’ll let us do is fire a whole bunch of data at our function with the aim of helping us ensure that these properties hold.&lt;/p&gt;

&lt;p&gt;Now before we get onto FsCheck itself, let’s look at how we might test this traditionally. Normally using something like xUnit, you’d have to write specific examples such as this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;Fact&amp;gt;]
let ``for a non-negative list, returns the same list`` () =
    let list = [1;2;3]
    let result = list = removeNegatives list
    Assert.True result
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This does work, but it means you have to manually come up with a few examples of this, a few examples of the other ones. In this particular case the function is simple enough that this would find any bugs but in more complex functions there might be certain numbers that would break it.&lt;/p&gt;

&lt;p&gt;So using FsCheck we would instead might define this test like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;Property&amp;gt;]
let ``for a non-negative list, returns the same list`` (list:NonNegativeInt list) =
    let list = List.map (fun (i:NonNegativeInt) -&amp;gt; i.Get) list
    list = removeNegatives list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Property attribute works just like the Fact in xUnit or the Test in Nunit. There is one major difference however: the function no longer takes unit, it can take any parameter that FsCheck knows how to create (and yes, you can define them yourself). NonNegativeInt is a built in alias for int which is as the name suggests is a int which is not negative.&lt;/p&gt;

&lt;p&gt;You may also have noticed that there are no asserts in this test either. That is because as long as your function returns something FsCheck understands (i.e. bool, exceptions, etc), FsCheck will work out whether the test failed or not that way. So in this case, so long as the final line resolves to true, then the test will be considered to have passed.&lt;/p&gt;

&lt;p&gt;There is actually one final thing to note here aswell, this test isn’t excuted once. By default FsCheck will try to find 100 parameters that work and run the test that many times. You can change this number by setting the MaxSize like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;Property(MaxSize=1000)&amp;gt;]
let ``my test`` () =
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anyway, back the tests. If you try and run this test, you’ll see that it fails. Oh noes! What could possibly be wrong?!?! Oh yes, have you noticed that the list is actually reversed during the process, which breaks one of our properties. So lets fix that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let removeNegatives list =
        let rec removeNegatives' list newList =
            match list with
            | [] -&amp;gt; List.rev newList
            | head :: tail when head &amp;lt; 0 -&amp;gt; removeNegatives' tail newList 
            | head :: tail -&amp;gt; removeNegatives' tail (head :: newList)
        removeNegatives' list []
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ok, so now we have a test covering that second property: if you pass in a non-negative list, you get the same list back again.&lt;/p&gt;

&lt;p&gt;So now how about the first property, testing for the removal of elements less than zero. Well first we could write a test that checks that if you pass in a list of negative numbers, it should always return an empty list:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;Property&amp;gt;]
let ``for a negative list, returns an empty list`` (list:PositiveInt list) =
    let list = List.map (fun (i:PositiveInt) -&amp;gt; -1 * i.Get) list
    [] = removeNegatives list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ok great and that passes, maybe we should write a test that tests if it actually filters things out. Well that looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;Property&amp;gt;]
    let ``for a mixed list, returns a positive list`` (list:int list) =
        let outputList = List.filter (fun i -&amp;gt; i &amp;gt;= 0) list
        outputList = removeNegatives list
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case, this test rather points out the uselessness of this function. Maybe that makes it quite a bad example, but I put it here for completeness anyway (after all it does implement the same function in a single line).&lt;/p&gt;

&lt;h2 id=&quot;side-note&quot;&gt;Side note&lt;/h2&gt;
&lt;p&gt;I probably should point out that I have had some problem with using FsCheck, 
if you’re using NCrunch you might notice the tests don’t get picked up. However,
I have found that if you include the following code in your module it works:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;Fact&amp;gt;]
let ``ignore this test`` () =
    ()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This (for some reason) causes NCrunch to see all the other tests too.&lt;/p&gt;</content><author><name>Simon Dickson</name></author><summary>Property based testing
So you might be first wondering what property based testing means. Simply put you describe properties of your functions, and then you bombard your code with data trying to prove or disprove these properties.

Here’s an example, let’s say we have a function like this:

let removeNegatives list =
        let rec removeNegatives' list newList =
            match list with
            | [] -&amp;gt; newList
            | head :: tail when head &amp;lt; 0 -&amp;gt; removeNegatives' tail newList 
            | head :: tail -&amp;gt; removeNegatives' tail (head :: newList)
        removeNegatives' list []



And we want to say this function has the following three properties:


  If you pass in a list, it returns the list without any negative numbers in it.
  If you pass in a list without any negative numbers in it, you get exactly the same list back (this is implied from the first property, but let’s make it explict anyway).
  The function will not re-order the elements.


So, how do we go about testing these properties?

FsCheck to the rescue
FsCheck is an F# port of the Haskell framework QuickCheck. What it’ll let us do is fire a whole bunch of data at our function with the aim of helping us ensure that these properties hold.

Now before we get onto FsCheck itself, let’s look at how we might test this traditionally. Normally using something like xUnit, you’d have to write specific examples such as this:

[&amp;lt;Fact&amp;gt;]
let ``for a non-negative list, returns the same list`` () =
    let list = [1;2;3]
    let result = list = removeNegatives list
    Assert.True result



This does work, but it means you have to manually come up with a few examples of this, a few examples of the other ones. In this particular case the function is simple enough that this would find any bugs but in more complex functions there might be certain numbers that would break it.

So using FsCheck we would instead might define this test like this:

[&amp;lt;Property&amp;gt;]
let ``for a non-negative list, returns the same list`` (list:NonNegativeInt list) =
    let list = List.map (fun (i:NonNegativeInt) -&amp;gt; i.Get) list
    list = removeNegatives list



The Property attribute works just like the Fact in xUnit or the Test in Nunit. There is one major difference however: the function no longer takes unit, it can take any parameter that FsCheck knows how to create (and yes, you can define them yourself). NonNegativeInt is a built in alias for int which is as the name suggests is a int which is not negative.

You may also have noticed that there are no asserts in this test either. That is because as long as your function returns something FsCheck understands (i.e. bool, exceptions, etc), FsCheck will work out whether the test failed or not that way. So in this case, so long as the final line resolves to true, then the test will be considered to have passed.

There is actually one final thing to note here aswell, this test isn’t excuted once. By default FsCheck will try to find 100 parameters that work and run the test that many times. You can change this number by setting the MaxSize like this:

[&amp;lt;Property(MaxSize=1000)&amp;gt;]
let ``my test`` () =
    ...



Anyway, back the tests. If you try and run this test, you’ll see that it fails. Oh noes! What could possibly be wrong?!?! Oh yes, have you noticed that the list is actually reversed during the process, which breaks one of our properties. So lets fix that.

let removeNegatives list =
        let rec removeNegatives' list newList =
            match list with
            | [] -&amp;gt; List.rev newList
            | head :: tail when head &amp;lt; 0 -&amp;gt; removeNegatives' tail newList 
            | head :: tail -&amp;gt; removeNegatives' tail (head :: newList)
        removeNegatives' list []



Ok, so now we have a test covering that second property: if you pass in a non-negative list, you get the same list back again.

So now how about the first property, testing for the removal of elements less than zero. Well first we could write a test that checks that if you pass in a list of negative numbers, it should always return an empty list:

[&amp;lt;Property&amp;gt;]
let ``for a negative list, returns an empty list`` (list:PositiveInt list) =
    let list = List.map (fun (i:PositiveInt) -&amp;gt; -1 * i.Get) list
    [] = removeNegatives list



Ok great and that passes, maybe we should write a test that tests if it actually filters things out. Well that looks something like this:

[&amp;lt;Property&amp;gt;]
    let ``for a mixed list, returns a positive list`` (list:int list) =
        let outputList = List.filter (fun i -&amp;gt; i &amp;gt;= 0) list
        outputList = removeNegatives list



In this case, this test rather points out the uselessness of this function. Maybe that makes it quite a bad example, but I put it here for completeness anyway (after all it does implement the same function in a single line).

Side note
I probably should point out that I have had some problem with using FsCheck, 
if you’re using NCrunch you might notice the tests don’t get picked up. However,
I have found that if you include the following code in your module it works:

[&amp;lt;Fact&amp;gt;]
let ``ignore this test`` () =
    ()



This (for some reason) causes NCrunch to see all the other tests too.</summary></entry></feed>
